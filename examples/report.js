// Generated by CoffeeScript 1.9.2
var build, curve, exe, ql, report, store;

console.log("OdoQL - " + (new Date().toString()));

curve = function(x) {
  if (x < 0.5) {
    return 2 * x * x;
  }
  return 1 - 2 * (x - 1) * (x - 1);
};

console.log(curve(0));

console.log(curve(0.25));

console.log(curve(0.5));

console.log(curve(0.75));

console.log(curve(1));

ql = require('odoql');

ql = ql.use('store');

report = {
  queries: {
    'Crux EC WRF': ql.store('Crux EC WRF'),
    'Crux EC ENS': ql.store('Crux EC ENS'),
    'Prelude EC WRF': ql.store('Prelude EC WRF'),
    'Prelude EC ENS': ql.store('Prelude EC ENS'),
    'Crux Waves': ql.store('Crux Waves'),
    'Browse Island Observations': ql.store('Browse Island Observations')
  },
  sources: {
    'Crux EC WRF': ql.param('Crux EC WRF'),
    'Crux EC ENS': ql.param('Crux EC ENS'),
    'Prelude EC WRF': ql.param('Prelude EC WRF'),
    'Prelude EC ENS': ql.param('Prelude EC ENS'),
    'Crux Waves': ql.param('Crux Waves'),
    'Browse Island Observations': ql.param('Browse Island Observations')
  },
  data: {
    author: {
      name: 'Author',
      editor: 'author',
      source: 'Rob Davis'
    },
    discussion: {
      name: 'Discussion',
      editor: 'rich-text',
      source: 'Discussion goes here'
    },
    meteo: {
      name: 'Meteo',
      editor: 'meteo',
      source: ql.param('Crux EC WRF'),
      source2: ql.param('Crux EC ENS'),
      source3: ql.param('Browse Island Observations')
    },
    waves: {
      name: 'Waves',
      editor: 'waves',
      source: ql.param('Crux Waves')
    },
    observations: {
      name: 'Observations',
      editor: 'obs-feed-selector',
      source: ql.param('Browse Island Observations')
    }
  }
};

store = require('odoql-store');

store = store().use('Crux EC WRF', function(params, cb) {
  return cb(null, [1, 2, 3, 4]);
}).use('Crux EC ENS', function(params, cb) {
  return cb(null, [1, 2, 3, 4]);
}).use('Prelude EC WRF', function(params, cb) {
  return cb(null, [1, 2, 3, 4]);
}).use('Prelude EC ENS', function(params, cb) {
  return cb(null, [1, 2, 3, 4]);
}).use('Crux Waves', function(params, cb) {
  return cb(null, [1, 2, 3, 4]);
}).use('Browse Island Observations', function(params, cb) {
  return cb(null, [1, 2, 3, 4]);
});

exe = require('odoql-exe');

exe = exe().use(store);

build = require('odoql-exe/buildqueries');

build(exe, report.queries)(function(err, params) {
  var key, ref, source, sources;
  if (err != null) {
    return cb(err);
  }
  sources = {};
  ref = report.sources;
  for (key in ref) {
    source = ref[key];
    sources[key] = ql.fill(params, source);
  }
  return build(exe, sources)(function(err, sources) {
    var results;
    results = [];
    for (key in sources) {
      source = sources[key];
      results.push(console.log(key + ": " + (JSON.stringify(source))));
    }
    return results;
  });
});
