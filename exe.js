// Generated by CoffeeScript 1.9.1
var builtin, isquery;

builtin = [require('./ops/boolean'), require('./ops/conditional'), require('./ops/maths'), require('./ops/transform')];

isquery = require('./isquery');

module.exports = {
  use: function(def) {
    var i, len, providers, res;
    providers = {
      literal: function(exe, value) {
        return function(cb) {
          return cb(null, value);
        };
      }
    };
    res = {
      providers: providers,
      clear: function() {
        return providers = {
          literal: function(exe, value) {
            return function(cb) {
              return cb(null, value);
            };
          }
        };
      },
      use: function(def) {
        var _, fn, name, optype, results;
        results = [];
        for (_ in def) {
          optype = def[_];
          results.push((function() {
            var results1;
            results1 = [];
            for (name in optype) {
              fn = optype[name];
              results1.push(providers[name] = fn);
            }
            return results1;
          })());
        }
        return results;
      },
      build: function(q) {
        if (!isquery(q)) {
          return res.providers.literal(res, q);
        }
        if (res.providers[q.__query] == null) {
          throw new Error(q.__query + " not found");
        }
        return res.providers[q.__query](res, q);
      }
    };
    res.use(def);
    for (i = 0, len = builtin.length; i < len; i++) {
      def = builtin[i];
      res.use(def);
    }
    return res;
  }
};
