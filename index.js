// Generated by CoffeeScript 1.9.1
var applyglobals, library, ql;

library = require('./library');

ql = function(query, def) {
  var _, fn1, fn2, fn3, fn4, i, len, name, ref, ref1, ref2, ref3, res, source;
  res = {
    query: function() {
      return query;
    },
    clone: function(deep) {
      var newquery;
      if (!deep) {
        return ql(query, def);
      }
      newquery = JSON.parse(JSON.stringify(query));
      return ql(newquery, def);
    }
  };
  for (i = 0, len = def.length; i < len; i++) {
    source = def[i];
    ref = source.params;
    fn1 = function(name) {
      return res[name] = function(params) {
        query = ql.params(name, params, query);
        return res;
      };
    };
    for (name in ref) {
      _ = ref[name];
      fn1(name);
    }
    ref1 = source.unary;
    fn2 = function(name) {
      return res[name] = function() {
        query = ql.unary(name, query);
        return res;
      };
    };
    for (name in ref1) {
      _ = ref1[name];
      fn2(name);
    }
    ref2 = source.binary;
    fn3 = function(name) {
      return res[name] = function(right) {
        query = ql.binary(name, query, right);
        return res;
      };
    };
    for (name in ref2) {
      _ = ref2[name];
      fn3(name);
    }
    ref3 = source.trinary;
    fn4 = function(name) {
      return res[name] = function(left, right) {
        query = ql.trinary(name, query, left, right);
        return res;
      };
    };
    for (name in ref3) {
      _ = ref3[name];
      fn4(name);
    }
  }
  return res;
};

ql.params = function(name, params, source) {
  return {
    __q: name,
    __p: params,
    __s: source
  };
};

ql.unary = function(name, source) {
  return {
    __q: name,
    __s: source
  };
};

ql.binary = function(name, left, right) {
  return {
    __q: name,
    __l: left,
    __r: right
  };
};

ql.trinary = function(name, params, left, right) {
  return {
    __q: name,
    __p: params,
    __l: left,
    __r: right
  };
};

applyglobals = function(res, def) {
  var _, fn1, fn2, fn3, name, ref, ref1, ref2, ref3, results;
  ref = def.params;
  fn1 = function(name) {
    return res[name] = function(params, source) {
      return ql.params(name, params, source);
    };
  };
  for (name in ref) {
    _ = ref[name];
    fn1(name);
  }
  ref1 = def.unary;
  fn2 = function(name) {
    return res[name] = function(source) {
      return ql.unary(name, source);
    };
  };
  for (name in ref1) {
    _ = ref1[name];
    fn2(name);
  }
  ref2 = def.binary;
  fn3 = function(name) {
    return res[name] = function(left, right) {
      return ql.binary(name, left, right);
    };
  };
  for (name in ref2) {
    _ = ref2[name];
    fn3(name);
  }
  ref3 = def.trinary;
  results = [];
  for (name in ref3) {
    _ = ref3[name];
    results.push((function(name) {
      return res[name] = function(params, left, right) {
        return ql.trinary(name, params, left, right);
      };
    })(name));
  }
  return results;
};

ql.use = function(def) {
  var fn, name, res;
  res = function(query) {
    return ql(query, res.providers);
  };
  for (name in ql) {
    fn = ql[name];
    res[name] = fn;
  }
  res.providers = [];
  res.use = function(def) {
    var d, i, len;
    if (typeof def === 'string') {
      if (library[def] == null) {
        throw new Error(def + " not found in library");
      }
      def = library[def];
    }
    if (def instanceof Array) {
      for (i = 0, len = def.length; i < len; i++) {
        d = def[i];
        res.use(d);
      }
      return res;
    }
    applyglobals(res, def);
    res.providers.push(def);
    return res;
  };
  res;
  res.use(library.builtin);
  return res.use(def);
};

applyglobals(ql, library.builtin);

module.exports = ql;
