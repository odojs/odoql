// Generated by CoffeeScript 1.9.1
var async, extend;

async = require('odo-async');

extend = require('extend');

module.exports = {
  params: {
    assign: function(exe, params) {
      var getsource;
      getsource = exe.build(params.__s);
      return function(callback) {
        return getsource(function(err, source) {
          var assi, d, def, i, len, prop, ref1, ref2, tasks;
          if (err != null) {
            return cb(err);
          }
          assi = function(data, prop, def) {
            return function(cb) {
              var fillrefs;
              fillrefs = function(d, cb) {
                var fn, getref, key, tasks, value;
                if (typeof d !== 'object') {
                  return cb(null, d);
                }
                if (d.__q === 'ref') {
                  getref = exe.build(d.__s);
                  return getref(function(err, ref) {
                    if (err != null) {
                      return callback(err);
                    }
                    return cb(null, data[ref]);
                  });
                }
                tasks = [];
                fn = function(key, value) {
                  return tasks.push(function(cb) {
                    return fillrefs(value, function(err, res) {
                      d[key] = res;
                      return cb();
                    });
                  });
                };
                for (key in d) {
                  value = d[key];
                  fn(key, value);
                }
                return async.series(tasks, function() {
                  return cb(null, d);
                });
              };
              def = extend(true, {}, def);
              return fillrefs(def, function(err, filled) {
                var getref;
                if (err != null) {
                  return callback(err);
                }
                getref = exe.build(filled);
                return getref(function(err, value) {
                  if (err != null) {
                    return callback(err);
                  }
                  data[prop] = value;
                  return cb();
                });
              });
            };
          };
          tasks = [];
          if (source instanceof Array) {
            for (i = 0, len = source.length; i < len; i++) {
              d = source[i];
              ref1 = params.__p;
              for (prop in ref1) {
                def = ref1[prop];
                tasks.push(assi(d, prop, def));
              }
            }
          } else {
            ref2 = params.__p;
            for (prop in ref2) {
              def = ref2[prop];
              tasks.push(assi(source, prop, def));
            }
          }
          return async.series(tasks, function() {
            return callback(null, source);
          });
        });
      };
    }
  }
};
