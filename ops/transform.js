// Generated by CoffeeScript 1.9.1
var helpers,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

helpers = require('../ops/helpers');

module.exports = {
  params: {
    filter: function(exe, params) {
      return helpers.params(exe, params, function(params, source) {
        return source.filter(function(d) {
          var key, ref, test;
          for (key in params) {
            test = params[key];
            if (d[key] === void 0) {
              return false;
            }
            if (test instanceof Array) {
              if (ref = d[key], indexOf.call(test, ref) < 0) {
                return false;
              }
            } else {
              if (d[key] !== test) {
                return false;
              }
            }
          }
          return true;
        });
      });
    },
    findandreplace: function(exe, params) {
      return helpers.params(exe, params, function(params, source) {
        if (typeof source !== 'string') {
          throw new Error('Expecting string for findandreplace');
        }
        return source.replace(new RegExp(params.find, params.flags), params.replace);
      });
    },
    pluck: function(exe, params) {
      return helpers.params(exe, params, function(params, source) {
        var plu;
        plu = function(d) {
          return d[params];
        };
        if (source instanceof Array) {
          return source.map(plu);
        } else {
          return plu(source);
        }
      });
    },
    remove: function(exe, params) {
      return helpers.params(exe, params, function(params, source) {
        var rem;
        rem = function(d) {
          var _, target;
          for (target in params) {
            _ = params[target];
            delete d[target];
          }
          return d;
        };
        if (source instanceof Array) {
          return source.map(rem);
        } else {
          return rem(source);
        }
      });
    },
    shape: function(exe, params) {
      return helpers.params(exe, params, function(params, source) {
        var sha;
        sha = function(d) {
          var _, res, target;
          res = {};
          for (target in params) {
            _ = params[target];
            res[target] = d[target];
          }
          return res;
        };
        if (source instanceof Array) {
          return source.map(sha);
        } else {
          return sha(source);
        }
      });
    },
    translate: function(exe, params) {
      return helpers.params(exe, params, function(params, source) {
        var trans;
        trans = function(d) {
          var target, value;
          for (target in params) {
            source = params[target];
            value = d[source];
            delete d[source];
            d[target] = value;
          }
          return d;
        };
        if (source instanceof Array) {
          return source.map(trans);
        } else {
          return trans(source);
        }
      });
    },
    count: function(exe, params) {
      return helpers.unary(exe, params, function(source) {
        if (!(source instanceof Array)) {
          throw new Error('Not an array');
        }
        return source.length;
      });
    },
    one: function(exe, params) {
      return helpers.unary(exe, params, function(source) {
        if (!(source instanceof Array)) {
          throw new Error('Not an array');
        }
        if (source.length !== 1) {
          throw new Error('No single item');
        }
        return source.pop();
      });
    },
    oneornone: function(exe, params) {
      return helpers.unary(exe, params, function(source) {
        if (!(source instanceof Array)) {
          throw new Error('Not an array');
        }
        if (source.length === 0) {
          return null;
        }
        if (source.length === 1) {
          return source.pop();
        }
        throw new Error('More than one item');
      });
    }
  }
};
