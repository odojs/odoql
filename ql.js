// Generated by CoffeeScript 1.8.0
var eq, extend, merge;

extend = require('extend');

eq = function(a, b) {
  var aarray, akeys, barray, bkeys, i, key, value, _i, _ref;
  if (a === b) {
    return true;
  }
  if (typeof a !== 'object' || typeof b !== 'object') {
    return false;
  }
  if (a === null || b === null) {
    return false;
  }
  aarray = a instanceof Array;
  barray = b instanceof Array;
  if (aarray !== barray) {
    return false;
  }
  if (aarray) {
    if (a.length !== b.length) {
      return false;
    }
    for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (!eq(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
  akeys = Object.keys(a);
  bkeys = Object.keys(b);
  if (akeys.length !== bkeys.length) {
    return false;
  }
  for (key in a) {
    value = a[key];
    if (!eq(value, b[key])) {
      return false;
    }
  }
  return true;
};

merge = function(base, extra) {
  var aarray, barray, key, value, _results;
  aarray = base instanceof Array;
  barray = extra instanceof Array;
  if (aarray) {
    if (!barray) {
      console.log('Not an array, ignoring');
      console.log(extra);
      return base;
    }
    if (base.length !== 1 || extra.length !== 1) {
      console.log('Expecting length 1 arrays');
      console.log(extra);
      return base;
    }
    return [merge(base[0], extra[0])];
  }
  if (base.__query != null) {
    if (extra.__query == null) {
      console.log('Non query, ignoring');
      console.log(extra);
      return base;
    }
    if (!eq(base.__params, extra.__params)) {
      console.log('Query does not match, ignoring');
      console.log(extra);
      return base;
    }
    if ((base.__graph == null) || (extra.__graph == null)) {
      return base;
    }
    merge(base.__graph, extra.__graph);
    return;
  } else if (extra.__query != null) {
    console.log('Query, ignoring');
    console.log(extra);
    return base;
  }
  _results = [];
  for (key in extra) {
    value = extra[key];
    if ((base[key] != null) && typeof value === 'object') {
      merge(base[key], value);
      continue;
    }
    _results.push(base[key] = value);
  }
  return _results;
};

module.exports = {
  query: function(graph, query) {
    return {
      __query: query.name,
      __params: query,
      __graph: graph
    };
  },
  merge: function(queries) {
    var query, result, _i, _len;
    if (arguments.length === 0) {
      return null;
    }
    if (arguments.length !== 1) {
      queries = Array.prototype.slice.call(arguments, 0);
    }
    if (queries.length === 0) {
      return null;
    }
    result = {};
    for (_i = 0, _len = queries.length; _i < _len; _i++) {
      query = queries[_i];
      merge(result, extend({}, query));
    }
    return result;
  },
  exec: function(queries, stores) {
    var graph, key, state, store;
    state = {};
    for (key in queries) {
      graph = queries[key];
      store = stores[graph.__query];
      state[key] = store.query(graph, store.subqueries);
    }
    return state;
  }
};
