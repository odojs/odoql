// Generated by CoffeeScript 1.8.0
var eq, extend, merge;

extend = require('extend');

eq = function(a, b) {
  var aarray, akeys, barray, bkeys, i, key, value, _i, _ref;
  if (a === b) {
    return true;
  }
  if (typeof a !== 'object' || typeof b !== 'object') {
    return false;
  }
  if (a === null || b === null) {
    return false;
  }
  aarray = a instanceof Array;
  barray = b instanceof Array;
  if (aarray !== barray) {
    return false;
  }
  if (aarray) {
    if (a.length !== b.length) {
      return false;
    }
    for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (!eq(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
  akeys = Object.keys(a);
  bkeys = Object.keys(b);
  if (akeys.length !== bkeys.length) {
    return false;
  }
  for (key in a) {
    value = a[key];
    if (!eq(value, b[key])) {
      return false;
    }
  }
  return true;
};

merge = function(base, extra) {
  var key, value, _results;
  if (base.__odoql != null) {
    if (extra.__odoql == null) {
      console.log('Non query, ignoring');
      console.log(extra);
      return base;
    }
    if (!eq(base.__odoql, extra.__odoql)) {
      console.log('Query does not match, ignoring');
      console.log(extra);
      return base;
    }
  }
  _results = [];
  for (key in extra) {
    value = extra[key];
    if (key === '__odoql') {
      continue;
    }
    if ((base[key] != null) && typeof value === 'object') {
      merge(base[key], value);
      continue;
    }
    _results.push(base[key] = value);
  }
  return _results;
};

module.exports = {
  object: function(graph, query) {
    var result;
    result = extend({}, graph, {
      __odoql: {
        type: 'object'
      }
    });
    if (query == null) {
      return result;
    }
    result.__odoql.query = query;
    return result;
  },
  array: function(graph, query, params) {
    var result;
    result = extend({}, graph, {
      __odoql: {
        type: 'array'
      }
    });
    if (query == null) {
      return result;
    }
    result.__odoql.query = query;
    return result;
  },
  merge: function(queries) {
    var query, result, _i, _len;
    result = {};
    for (_i = 0, _len = queries.length; _i < _len; _i++) {
      query = queries[_i];
      merge(result, query);
    }
    return result;
  },
  exec: function(queries, stores) {
    var def, graph, key, state, store;
    state = {};
    for (key in queries) {
      graph = queries[key];
      def = graph.__odoql;
      store = stores[def.query.name];
      state[key] = store(def, graph);
    }
    return state;
  }
};
