// Generated by CoffeeScript 1.9.1
var builtin, ql,
  slice = [].slice;

builtin = ['findandreplace', 'one', 'oneornone', 'shape', 'pluck', 'remove', 'filter', 'translate', 'count'];

ql = function(_query, def) {
  var build, fn, fn1, i, len, name, res;
  res = {
    query: function() {
      return _query;
    },
    fresh: function() {
      _query.__fresh = true;
      return res;
    },
    clone: function() {
      return ql(_query, def);
    }
  };
  fn1 = function(fn) {
    return res[name] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      _query = fn.apply(null, [_query].concat(slice.call(args)));
      return res;
    };
  };
  for (name in def) {
    fn = def[name];
    fn1(fn);
  }
  build = function(name) {
    return res[name] = function(params) {
      _query = ql.unit(name, params, _query);
      return res;
    };
  };
  for (i = 0, len = builtin.length; i < len; i++) {
    name = builtin[i];
    build(name);
  }
  return res;
};

ql.unit = function(name, params, source) {
  return {
    __query: name,
    __params: params,
    __source: source
  };
};

ql.use = function(def) {
  var extra, res;
  extra = {};
  res = function(query) {
    return ql(query, def);
  };
  res.unit = ql.unit;
  res.use = function(def) {
    var fn, name;
    for (name in def) {
      fn = def[name];
      extra[name] = fn;
    }
    return res;
  };
  return res.use(def);
};

ql.desc = require('./ql/desc');

ql.merge = require('./ql/merge');

ql.split = require('./ql/split');

ql.diff = require('./ql/diff');

ql.build = require('./ql/build');

ql.exec = require('./ql/exec');

module.exports = ql;
